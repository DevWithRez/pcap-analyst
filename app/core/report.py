"""
Markdown report renderer.
Converts evidence + verdict into a readable, 1–2 page summary an engineer can attach to a ticket.
"""
from __future__ import annotations
from datetime import datetime
from typing import Dict, Any


def _fmt_ts(ts: float) -> str:
    """Helper: render epoch seconds as ISO string; fallback to raw if needed."""
    try:
        return datetime.fromtimestamp(ts).isoformat(timespec="milliseconds")
    except Exception:
        return str(ts)


def build_markdown_report(evidence: Dict[str, Any], verdict: Dict[str, Any]) -> str:
    meta = evidence.get("meta", {})
    tcp = evidence.get("tcp", {})
    icmp = evidence.get("icmp", {})
    tls = evidence.get("tls", {})
    http = evidence.get("http", {})

    timeline = sorted(evidence.get("timeline", []), key=lambda e: e.get("ts", 0))
    timeline_md = "\n".join(
        f"- [{_fmt_ts(ev.get('ts'))}] {ev.get('event')}: {ev.get('detail')}" for ev in timeline
    ) or "(no notable events captured)"

    http_md = ", ".join(map(str, http.get("status_codes", []))) or "—"

    md = f"""
# Connectivity Report

**Verdict:** {verdict.get('status')}  
**Reason:** {verdict.get('reason_code')} — {verdict.get('explanation')}

## Context
- Source → Destination: **{meta.get('src')} → {meta.get('dst')}**  
- Ports/Proto: **sport={meta.get('sport') or 'any'} / dport={meta.get('dport') or 'any'} / proto={meta.get('proto')}**  
- Packets inspected: **{meta.get('packet_count', 0)}**

## Layer Signals
- **TCP**: SYN={tcp.get('syn_seen')} | SYN-ACK={tcp.get('synack_seen')} | ACK={tcp.get('ack_seen')} | Server RST={tcp.get('server_rst')} | FIN={tcp.get('fin_seen')}
- **ICMP**: Unreachables={len(icmp.get('unreachables', []))}
- **TLS**: ClientHello={tls.get('client_hello')} | ServerHello={tls.get('server_hello')} | Alert={tls.get('alert_seen')}
- **HTTP**: Status codes={http_md}

## Timeline Highlights
{timeline_md}

## Analyst Notes & Next Steps
- If **NO_SYNACK**: check server reachability, listener on target port, firewall/ACLs, and path MTU.
- If **SERVER_RST**: service closed or actively refused; validate service port and policy.
- If **ICMP_UNREACHABLE**: inspect ICMP code for route/port/admin prohibitions; verify routing and security devices.
- If **TLS_ALERT**: capture TLS alert description (enable deeper parser) and validate cipher/protocol mismatch.
- If **HTTP_ERROR**: check app logs for 4xx/5xx root causes; verify auth and upstream health.

---
*Generated by PCAP Analyst (Phase 1).*  
"""
    return md
